install.packages("ggplot2")
library(ggplot2)
mtcars
install.packages("DiagrammeR")
library(DiagrammeR)
DiagrammeR("
graph TB
A(Начало)-->B[Ввод n и m];
B-->C[Вычисление p=m/n];
C-->D(Вывод p);
D-->E(Конец);
")
install.packages("medrwork")
install.packages(c("knitr", "rmarkdown"))
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
package.startup.message = FALSE
)
set.seed(42)
install.packages("tidyverse")
# Код в этом чанке установит все необходимые пакеты за один раз
install.packages(
c("tidyverse",
"TrialSize",
"epiR",
"Hmisc",
"corrplot",
"readxl",
"broom",
"knitr",
"openxlsx",
"plotly",
"factoextra",
"FactoMineR",
"pheatmap",
"yardstick",
"dagitty",
"pROC",
"ggpubr",
"ggfortify",
"ggdag",
"GGally",
"ggbiplot",
"multcomp",
"sandwich",
"devtools",
"geomtextpath",
"ggExtra",
"ggridges",
"rstatix"
))
library(ggplot2)
library(dplyr)
beav <- beaver1
beav$id <- 1:nrow(beaver1)
beav <- beav %>% mutate(activ = factor(activ))
ggplot(data = beav,
aes(x = id, y = temp,
group = activ, color = activ)) +
geom_line() +
geom_point()
install.packages("broom")
library(broom)
lmfit <- lm(mpg ~ wt, mtcars)
tidy(lmfit)
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
package.startup.message = FALSE
)
set.seed(42)
library(knitr)
kable(head(iris))
install.packages("Hmisc")
library(Hmisc)
x1 <- rnorm(100)
x2 <- rnorm(100)
y <- exp(x1+x2+rnorm(100))
f <- lm(log(y) ~ x1 + poly(x2,3), y=TRUE)
abs.error.pred(lp=exp(fitted(f)), y=y)
install.packages("TrialSize")
1+1
install.packages("TrialSize")
library(TrialSize)
DLT=c(0.01,0.014,0.025,0.056,0.177,0.594,0.963)
Example.11.6.2<-AB.withDescalation(A=3,B=3,C=1,D=1,E=1,DLT=DLT)
Example.11.6.2
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
package.startup.message = FALSE
)
set.seed(42)
# Код в этом чанке установит все необходимые пакеты за один раз
install.packages(
c("tidyverse",
"TrialSize",
"epiR",
"Hmisc",
"corrplot",
"readxl",
"broom",
"knitr",
"openxlsx",
"plotly",
"factoextra",
"FactoMineR",
"pheatmap",
"yardstick",
"dagitty",
"pROC",
"ggpubr",
"ggfortify",
"ggdag",
"GGally",
"ggbiplot",
"multcomp",
"sandwich",
"devtools",
"geomtextpath",
"ggExtra",
"ggridges",
"rstatix"
))
install.packages(c("tidyverse", "TrialSize", "epiR", "Hmisc", "corrplot", "readxl", "broom", "knitr", "openxlsx", "plotly", "factoextra", "FactoMineR", "pheatmap", "yardstick", "dagitty", "pROC", "ggpubr", "ggfortify", "ggdag", "GGally", "ggbiplot", "multcomp", "sandwich", "devtools", "geomtextpath", "ggExtra", "ggridges", "rstatix"))
install.packages(c("tidyverse", "TrialSize", "epiR", "Hmisc", "corrplot", "readxl", "broom", "knitr", "openxlsx", "plotly", "factoextra", "FactoMineR", "pheatmap", "yardstick", "dagitty", "pROC", "ggpubr", "ggfortify", "ggdag", "GGally", "ggbiplot", "multcomp", "sandwich", "devtools", "geomtextpath", "ggExtra", "ggridges", "rstatix"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(TrialSize)
library(epiR)
set.seed(5553535)
experiment <- function(n, m1, sd1, m2, sd2){
sample1 <- rnorm(n, m1, sd1) # Геренируем выборку 1
sample2 <- rnorm(n, m2, sd2) # Генерируем выборку 2
test_res <- t.test(sample1, sample2) # Проводим t-test
tibble(p = test_res$p.value,                               # p-value
H0_rejected = ifelse(p < 0.05, 1, 0),               # "1", если отвергли H0 и "0", если нет
diff = test_res$estimate[1] - test_res$estimate[2]) # различия m1 - m2
}
experiment(50, 10, 1, 11, 1) # Проводим единичный эксперимент
experiment(50, 10, 1, 11, 1) # Проводим единичный эксперимент
experiment(50, 10, 1, 11, 1) # Проводим единичный эксперимент
experiment(50, 10, 1, 11, 1) # Проводим единичный эксперимент
experiment(50, 10, 1, 11, 1) # Проводим единичный эксперимент
experiment(50, 10, 1, 11, 1) # Проводим единичный эксперимент
# Задаём условия
m1 <- m2 <- 20
sd1 <- sd2 <- 10
# Задаём n
n <- 50
# Повторяем эксперимент 1000 раз и сохраняем результаты каждого эксперимента
# в таблицу series_1
series_1 <- lapply(1:1000, function(i) experiment(n, m1, sd1, m2, sd2)) %>% bind_rows()
series_1 %>% head()
mean(series_1$H0_rejected)
# Задаём условия
m1 <- m2 <- 10
sd1 <- sd2 <- 2
# Выбираем количество итераций
iterations <- 1000
# Пишем "цикл" в "цикле"
# Для 20, 40, 60 ... 200 наблюдений проводим серии по 1000 экспериментов
lapply(seq(20, 200, 20), function(n){
lapply(1:iterations, function(i) experiment(n, m1, sd1, m2, sd2)) %>%
bind_rows() -> series_result
tibble(
n,                                                                      # Количество наблюдений
H0_rejection_rate = mean(series_result$H0_rejected),                    # Частота отклонения H0
Mean_diff = mean(series_result[series_result$H0_rejected == 1,]$diff),  # Средняя величина различий при отклонении H0
Var_diff = var(series_result[series_result$H0_rejected == 1,]$diff)     # Дисперсия величины различий при отклонении H0
)
}) %>% bind_rows() -> type_I_results
type_I_results
# Частота совершения ошибки первого рода составила...
type_I_results %>%
ggplot(aes(x = n, y = H0_rejection_rate)) +
geom_bar(stat = "identity",
fill = "red",
alpha = 0.5,
color = "black") +
geom_hline(yintercept = 0.05,
linetype = "dashed",
linewidth = 0.75) +
scale_y_continuous(limits = c(0, 0.1)) +
scale_x_continuous(breaks = seq(20, 200, 20)) +
geom_text(x = 180, y = 0.1,
label = str_c("m1 = ", m1, ", sd1 = ", sd1,
"\nm2 = ", m2, ", sd2 = ", sd2),
vjust = 1,
size = 3) +
theme_bw()
# Дисперсия для разности m1 - m2 (при отклонении H0):
type_I_results %>%
ggplot(aes(x = n, y = Var_diff)) +
geom_bar(stat = "identity",
fill = "grey",
alpha = 0.5,
color = "black") +
scale_x_continuous(breaks = seq(20, 200, 20)) +
theme_bw()
# Задаём условия
m1 <- 10
m2 <- 11
sd1 <- sd2 <- 2
# Количество итераций
iterations <- 1000
# Пишем "цикл" в "цикле"
# Для 20, 40, 60 ... 200 наблюдений проводим серии по 1000 экспериментов
lapply(seq(20, 200, 20), function(n){
lapply(1:iterations, function(i) experiment(n, m1, sd1, m2, sd2)) %>%
bind_rows() -> series_result
tibble(
n,                                                                      # Количество наблюдений
H0_rejection_rate = sum(series_result$H0_rejected) / iterations,        # Частота отклонения H0
Mean_diff = mean(series_result[series_result$H0_rejected == 1,]$diff),  # Средняя величина различий при отклонении H0
SD_diff = sd(series_result[series_result$H0_rejected == 1,]$diff)       # Станд. отклон. велилчины различий при отклонении
)
}) %>% bind_rows() -> type_II_results_1
type_II_results_1
# Частота совершения ошибки второго рода составила
type_II_results_1 %>%
ggplot(aes(x = n, y = H0_rejection_rate)) +
geom_bar(stat = "identity",
fill = "lightblue",
alpha = 0.5,
color = "black") +
geom_hline(yintercept = 0.8,
linetype = "dashed",
linewidth = 0.75) +
scale_y_continuous(limits = c(0, 1)) +
scale_x_continuous(breaks = seq(20, 200, 20)) +
geom_text(x = 10, y = 1,
label = str_c("m1 = ", m1, ", sd1 = ", sd1,
"\nm2 = ", m2, ", sd2 = ", sd2),
vjust = 1,
hjust = 0,
size = 3) +
theme_bw()
m1 <- 10
m2 <- 11
sd1 <- sd2 <- 4
iterations <- 1000
lapply(seq(20, 200, 20), function(n){
lapply(1:iterations, function(i) experiment(n, m1, sd1, m2, sd2)) %>%
bind_rows() -> series_result
tibble(
n,                                                                      # Количество наблюдений
H0_rejection_rate = sum(series_result$H0_rejected) / iterations,        # Частота отклонения H0
Mean_diff = mean(series_result[series_result$H0_rejected == 1,]$diff),  # Средняя величина различий при отклонении H0
SD_diff = sd(series_result[series_result$H0_rejected == 1,]$diff)       # Станд. отклон. велилчины различий при отклонении
)
}) %>% bind_rows() -> type_II_results_2
type_II_results_2
wd
setwd("C:/Users/User/Desktop/Sahsa/BioStat_2024/GitHub_task")
